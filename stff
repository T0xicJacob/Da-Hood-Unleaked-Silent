local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera

local prediction = 0.1 -- Change the prediction value to adjust the aim prediction
local fov = 5 -- Change the FOV value to adjust the field of view

function isVisible(part)
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {localPlayer.Character}
    raycastParams.IgnoreWater = true
    local ray = Ray.new(camera.CFrame.Position, (part.Position - camera.CFrame.Position).Unit * 1000)
    local hit = workspace:FindPartOnRayWithIgnoreList(ray, raycastParams)
    return hit == part
end

function getTarget()
    local maxAngle = math.rad(fov / 2)
    local target = nil
    local maxDot = math.cos(maxAngle)
    for _, v in pairs(Players:GetPlayers()) do
        if v.Character and v.Character:FindFirstChild("HumanoidRootPart") and v.Character ~= localPlayer.Character and v.Character.Humanoid.Health > 0 then
            local dir = (v.Character.HumanoidRootPart.Position - camera.CFrame.Position).Unit
            local dot = dir:Dot(camera.CFrame.LookVector)
            if dot > maxDot and isVisible(v.Character.HumanoidRootPart) then
                target = v.Character.HumanoidRootPart
                maxDot = dot
            end
        end
    end
    return target
end

function aimAt(part)
    local lookVector = (part.Position - camera.CFrame.Position).Unit
    local targetAngle = math.acos(lookVector:Dot(camera.CFrame.LookVector))
    if targetAngle < math.rad(fov / 2) then
        local predictedPos = part.Position + part.Velocity * prediction
        camera.CFrame = CFrame.lookAt(camera.CFrame.Position, predictedPos)
    end
end

RunService.RenderStepped:Connect(function()
    local target = getTarget()
    if target then
        aimAt(target)
    end
end)

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local camera = workspace.CurrentCamera

local smoothness = 0.2
local keybind = Enum.KeyCode.Q

function updateCamera()
    camera.CFrame = character.HumanoidRootPart.CFrame
end

function activateCamlock()
    while true do
        updateCamera()
        wait(smoothness)
    end
end

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
    if input.KeyCode == keybind and not gameProcessed then
        activateCamlock()
    end
end)
